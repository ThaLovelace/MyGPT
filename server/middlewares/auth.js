import jwt from "jsonwebtoken";
import User from "../models/User.js";

export const protect = async (req, res, next) => {
  console.log("üîç === AUTH MIDDLEWARE DEBUG ===");
  console.log("üîç Headers:", JSON.stringify(req.headers, null, 2));
  console.log("üîç Authorization header:", req.headers.authorization);
  
  let token;

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ header ‡∏°‡∏µ Authorization ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "Bearer"
  if (req.headers.authorization && req.headers.authorization.startsWith("Bearer")) {
    try {
      // ‡∏î‡∏∂‡∏á token ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      token = req.headers.authorization.split(" ")[1];
      console.log("üîç Extracted token:", token ? token.substring(0, 20) + "..." : "null");

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ JWT_SECRET
      if (!process.env.JWT_SECRET) {
        console.log("‚ùå JWT_SECRET is missing!");
        return res.status(500).json({ 
          success: false, 
          message: "JWT_SECRET is not configured" 
        });
      }
      
      console.log("üîç JWT_SECRET exists:", process.env.JWT_SECRET ? "Yes" : "No");

      // ‚úÖ verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log("üîç Decoded token:", decoded);

      // ‚úÖ ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô token
      const user = await User.findById(decoded.id).select("-password");
      console.log("üîç Found user:", user ? user.email : "Not found");

      if (!user) {
        console.log("‚ùå User not found in database");
        return res.status(401).json({ 
          success: false, 
          message: "Not authorized, user not found" 
        });
      }

      // ‚úÖ ‡πÅ‡∏ô‡∏ö user ‡πÄ‡∏Ç‡πâ‡∏≤ req ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á controller
      req.user = user;
      console.log("‚úÖ Authentication successful for:", user.email);
      return next();

    } catch (error) {
      console.error("‚ùå Auth error:", error.message);
      
      let message = "Not authorized, token failed";
      if (error.name === "TokenExpiredError") {
        message = "Token expired";
      } else if (error.name === "JsonWebTokenError") {
        message = "Invalid token";
      }
      
      return res.status(401).json({ 
        success: false, 
        message,
        debug: error.message 
      });
    }
  } else {
    console.log("‚ùå No valid Authorization header");
    return res.status(401).json({ 
      success: false, 
      message: "Not authorized, no token" 
    });
  }
};